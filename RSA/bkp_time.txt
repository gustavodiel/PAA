Generating keys with 10 bits\n

real	0m0,015s
user	0m0,011s
sys	0m0,004s


 ENCRYPTING


 DECRYPTING


 DECRYPTING WITH Brute Force

real	0m0,013s
user	0m0,013s
sys	0m0,000s


 DECRYPTING WITH Brute Force + Pollard-Rho

real	0m0,013s
user	0m0,013s
sys	0m0,000s
Generating keys with 15 bits\n

real	0m0,015s
user	0m0,011s
sys	0m0,004s


 ENCRYPTING


 DECRYPTING


 DECRYPTING WITH Brute Force

real	0m0,012s
user	0m0,012s
sys	0m0,000s


 DECRYPTING WITH Brute Force + Pollard-Rho

real	0m0,013s
user	0m0,013s
sys	0m0,000s
Generating keys with 20 bits\n

real	0m0,015s
user	0m0,015s
sys	0m0,000s


 ENCRYPTING


 DECRYPTING


 DECRYPTING WITH Brute Force

real	0m0,015s
user	0m0,015s
sys	0m0,000s


 DECRYPTING WITH Brute Force + Pollard-Rho

real	0m0,014s
user	0m0,010s
sys	0m0,003s
Generating keys with 25 bits\n

real	0m0,015s
user	0m0,015s
sys	0m0,000s


 ENCRYPTING


 DECRYPTING


 DECRYPTING WITH Brute Force

real	0m0,314s
user	0m0,314s
sys	0m0,000s


 DECRYPTING WITH Brute Force + Pollard-Rho

real	0m0,018s
user	0m0,015s
sys	0m0,004s
Generating keys with 30 bits\n

real	0m0,015s
user	0m0,012s
sys	0m0,003s


 ENCRYPTING


 DECRYPTING


 DECRYPTING WITH Brute Force

real	0m0,804s
user	0m0,804s
sys	0m0,000s


 DECRYPTING WITH Brute Force + Pollard-Rho

real	0m0,043s
user	0m0,039s
sys	0m0,003s
Generating keys with 35 bits\n

real	0m0,027s
user	0m0,027s
sys	0m0,000s


 ENCRYPTING


 DECRYPTING


 DECRYPTING WITH Brute Force

real	1m43,379s
user	1m43,348s
sys	0m0,000s


 DECRYPTING WITH Brute Force + Pollard-Rho

real	0m0,203s
user	0m0,200s
sys	0m0,003s
Generating keys with 40 bits\n

real	0m0,072s
user	0m0,068s
sys	0m0,003s


 ENCRYPTING


 DECRYPTING


 DECRYPTING WITH Brute Force

real	15m6,524s
user	15m6,051s
sys	0m0,040s


 DECRYPTING WITH Brute Force + Pollard-Rho

real	0m2,202s
user	0m2,201s
sys	0m0,000s
Generating keys with 45 bits\n

real	0m0,589s
user	0m0,585s
sys	0m0,003s


 ENCRYPTING


 DECRYPTING


 DECRYPTING WITH Brute Force
Traceback (most recent call last):
  File "bruteforce.py", line 79, in <module>
    execute_brute_force()
  File "bruteforce.py", line 65, in execute_brute_force
    d = find_private_key(e, n)
  File "bruteforce.py", line 39, in find_private_key
    p = brute_force(n)
  File "bruteforce.py", line 32, in brute_force
    while n % p != 0 and p < n:
KeyboardInterrupt

real	832m29,015s
user	832m14,222s
sys	0m0,509s


 DECRYPTING WITH Brute Force + Pollard-Rho
Traceback (most recent call last):
  File "pollard-rho.py", line 94, in <module>
    execute_brute_force()
  File "pollard-rho.py", line 80, in execute_brute_force
    d = find_private_key(e, n)
  File "pollard-rho.py", line 54, in find_private_key
    p = pollard_rho(n)
  File "pollard-rho.py", line 43, in pollard_rho
    d = mdc((x - y) % n, n)
  File "pollard-rho.py", line 28, in mdc
    a, b = b, a % b
KeyboardInterrupt

real	0m1,272s
user	0m1,264s
sys	0m0,007s
Generating keys with 50 bits\n
Traceback (most recent call last):
  File "keygen.py", line 116, in <module>
    create_keys()
  File "keygen.py", line 76, in create_keys
    p, q = gen_prime(bit_count), gen_prime(bit_count)
  File "keygen.py", line 33, in gen_prime
    if is_prime(n):
  File "keygen.py", line 19, in is_prime
    if value % x == 0:
KeyboardInterrupt

real	0m0,216s
user	0m0,212s
sys	0m0,003s


 ENCRYPTING


 DECRYPTING


 DECRYPTING WITH Brute Force
Traceback (most recent call last):
  File "bruteforce.py", line 79, in <module>
    execute_brute_force()
  File "bruteforce.py", line 65, in execute_brute_force
    d = find_private_key(e, n)
  File "bruteforce.py", line 39, in find_private_key
    p = brute_force(n)
  File "bruteforce.py", line 32, in brute_force
    while n % p != 0 and p < n:
KeyboardInterrupt

real	0m0,205s
user	0m0,194s
sys	0m0,010s


 DECRYPTING WITH Brute Force + Pollard-Rho
Traceback (most recent call last):
  File "pollard-rho.py", line 94, in <module>
    execute_brute_force()
  File "pollard-rho.py", line 80, in execute_brute_force
    d = find_private_key(e, n)
  File "pollard-rho.py", line 54, in find_private_key
    p = pollard_rho(n)
  File "pollard-rho.py", line 43, in pollard_rho
    d = mdc((x - y) % n, n)
  File "pollard-rho.py", line 28, in mdc
    a, b = b, a % b
KeyboardInterrupt

real	0m0,216s
user	0m0,213s
sys	0m0,003s
